{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","_this$props","this","props","name","email","id","react_default","a","createElement","className","alt","src","concat","Component","CardList","_ref","map","robot","Card_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","children","ErrorBoundary","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","hasError","errorInfo","setState","CounterButton","updateCount","count","nextProps","nextState","nextContext","color","onClick","Header","components_CounterButton","App","onRequestRobots","onSearchChange","filteredRobots","filter","toLowerCase","includes","components_Header","components_SearchBox","src_components_Scroll","ErrorBoundary_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","users","json","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b554e24e.chunk.js","sourcesContent":["import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\n\nconst initialStateSearch = {\n    searchField: ''\n};\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n        return { ...state, searchField: action.payload };\n    default:\n        return state;\n    }\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n        return { ...state, isPending: true };\n    case REQUEST_ROBOTS_SUCCESS:\n        return { ...state, isPending: false, robots: action.payload };\n    case REQUEST_ROBOTS_FAILED:\n        return { ...state, isPending: false, error: action.payload };\n    default:\n        return state;\n    }\n};\n","import React, { Component } from 'react';\n\nexport default class Card extends Component {\n    render () {\n        const { name, email, id } = this.props;\n        return (\n            <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n                <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n                <div>\n                    <h2>{name}</h2>\n                    <p>{email}</p>\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n            {\n                robots.map(robot=> {\n                    return <Card key={robot.id}\n                                 id={robot.id}\n                                 name={robot.name}\n                                 email={robot.email}\n                    />;\n                })\n            }\n        </div>);\n};\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ( {searchfield, searchChange} ) => {\n    return (\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>\n    );\n};\n\nexport default SearchBox;","import React from 'react';\nimport './Scroll.css'\n\nconst Scroll = (props) => {\n    return (\n        <div className='scroll-container'>\n            { props.children }\n        </div>\n    );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nexport default class ErrorBoundary extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch (error, errorInfo) {\n        this.setState({ hasError: true });\n    }\n\n    render () {\n        if (this.state.hasError) {\n            return <h1>Oooops. That is not good</h1>;\n        }\n        return  this.props.children\n    }\n}","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n    constructor () {\n        super();\n        this.state = {\n            count: 0\n        };\n    }\n\n    shouldComponentUpdate (nextProps, nextState, nextContext) {\n        return nextState.count !== this.state.count;\n    }\n\n    updateCount = () => {\n        this.setState(state => ({count: state.count + 1}))\n    };\n\n    render () {\n        return (\n            <button color={this.props.color} onClick={this.updateCount}>\n                Count: {this.state.count}\n            </button>\n        );\n    }\n}\n\nexport default CounterButton;","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n    shouldComponentUpdate (nextProps, nextState, nextContext) {\n        return true;\n    }\n\n    render () {\n        return (\n            <div>\n                <h1 className='f1'>RoboFriends</h1>\n                <CounterButton color={'red'} />\n            </div>\n        );\n    }\n}\n\nexport default Header;\n\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport { requestRobots, setSearchField } from '../actions';\nimport './App.css';\nimport Header from '../components/Header';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    };\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    };\n};\n\nclass App extends Component {\n    componentDidMount () {\n        this.props.onRequestRobots();\n    }\n\n    render () {\n        const { searchField, onSearchChange, robots, isPending } = this.props;\n        const filteredRobots = robots\n            .filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n        if (isPending) {\n            return <h1 className='tc'>Loading</h1>;\n        }\n        return (\n            <div className='tc'>\n                <Header />\n                <SearchBox searchChange={onSearchChange} searchfield={searchField}/>\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots={filteredRobots}/>\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => ({ type: CHANGE_SEARCH_FIELD, payload: text });\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(users => users.json())\n        .then(users => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: users }))\n        .catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }));\n};","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { searchRobots, requestRobots } from './reducers';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(<Provider store={store}> <App /> </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}