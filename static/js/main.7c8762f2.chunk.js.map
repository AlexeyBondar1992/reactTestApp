{"version":3,"sources":["reducers.ts","actions.ts","api/api.ts","constants.ts","components/Card.tsx","components/CardList.tsx","components/SearchBox.tsx","components/Scroll.tsx","components/ErrorBoundary.tsx","components/CounterButton.tsx","components/Header.tsx","components/MainPage.tsx","containers/App.tsx","serviceWorker.ts","index.tsx"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","requestRobots","dispatch","url","type","fetch","then","users","json","payload","catch","err","Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","map","robot","components_Card","key","SearchBox","searchChange","aria-label","placeholder","onChange","Scroll","props","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","errorInfo","setState","Component","CounterButton","updateCount","count","nextProps","nextState","nextContext","color","onClick","Header","components_CounterButton","MainPage","filterRobots","filter","toLowerCase","includes","onRequestRobots","_this$props","onSearchChange","components_Header","components_SearchBox","src_components_Scroll","ErrorBoundary_ErrorBoundary","components_CardList","App","src_components_MainPage","connect","searchRobots","event","currentTarget","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7c8762f2.chunk.js","sourcesContent":["import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\nimport {Action, IStateRobots, IStateSearch} from './interfaces';\n\n\nexport const initialStateSearch: IStateSearch = {\n    searchField: ''\n};\nexport const initialStateRobots: IStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n};\n\nexport const searchRobots = (state: IStateSearch = initialStateSearch, action: Action<any>): IStateSearch => {\n    switch (action && action.type) {\n    case CHANGE_SEARCH_FIELD:\n        return { ...state, searchField: action.payload };\n    default:\n        return state;\n    }\n};\n\nexport const requestRobots = (state: IStateRobots = initialStateRobots, action: Action<any> = {}): IStateRobots => {\n    switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n        return { ...state, isPending: true };\n    case REQUEST_ROBOTS_SUCCESS:\n        return { ...state, isPending: false, robots: action.payload };\n    case REQUEST_ROBOTS_FAILED:\n        return { ...state, isPending: false, error: action.payload };\n    default:\n        return state;\n    }\n};\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\nimport {apiCall} from './api/api';\nimport {Dispatch} from 'redux';\n\nexport const setSearchField = (text: string) => ({ type: CHANGE_SEARCH_FIELD, payload: text });\n\nexport const requestRobots = () => (dispatch: Dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    apiCall('https://jsonplaceholder.typicode.com/users')\n        .then(users => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: users }))\n        .catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }));\n};","export const apiCall = (url: string) => fetch(url).then(users => users.json());\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React from 'react';\nimport {IRobot} from '../interfaces';\n\nconst Card: React.FunctionComponent<IRobot> = ({ name, email, id }) => {\n    return (\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Card","import React from 'react';\nimport Card from './Card';\nimport {IRobot} from '../interfaces';\n\n\nconst CardList: React.FunctionComponent<{ robots: IRobot[] }> = ({ robots }) => {\n    return (\n        <div>\n            {\n                robots.map(robot=> {\n                    return <Card key={robot.id}\n                                 id={robot.id}\n                                 name={robot.name}\n                                 email={robot.email}\n                    />;\n                })\n            }\n        </div>);\n};\n\nexport default CardList;","import React from 'react';\n\ninterface ISearchBoxProps {\n    searchChange (event: React.SyntheticEvent<HTMLInputElement>): void\n}\n\nconst SearchBox: React.FunctionComponent<ISearchBoxProps> = ( {searchChange} ) => {\n    return (\n        <div className='pa2'>\n            <input\n                aria-label='Search Robots'\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>\n    );\n};\n\nexport default SearchBox;","import React from 'react';\nimport './Scroll.css'\n\nconst Scroll: React.FunctionComponent = (props) => {\n    return (\n        <div className='scroll-container'>\n            { props.children }\n        </div>\n    );\n};\n\nexport default Scroll;","import React, {Component, ErrorInfo} from 'react';\n\ninterface IErrorBoundaryState {\n    hasError: boolean;\n}\n\nexport default class ErrorBoundary<P> extends Component<P, IErrorBoundaryState> {\n    constructor (props: P) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch (error: Error, errorInfo: ErrorInfo) {\n        this.setState({ hasError: true });\n    }\n\n    render () {\n        if (this.state.hasError) {\n            return <h1>Oooops. That is not good</h1>;\n        }\n        return  this.props.children\n    }\n}","import React, { Component } from 'react';\n\ninterface ICounterButtonProps {\n    color: string;\n}\n\ninterface ICounterButtonState {\n    count: number;\n}\n\nclass CounterButton extends Component<ICounterButtonProps, ICounterButtonState> {\n    constructor (props: ICounterButtonProps) {\n        super(props);\n        this.state = {\n            count: 0\n        };\n    }\n\n    shouldComponentUpdate (nextProps: ICounterButtonProps, nextState: ICounterButtonState, nextContext: any) {\n        return nextState.count !== this.state.count;\n    }\n\n    updateCount = () => {\n        this.setState(state => ({count: state.count + 1}))\n    };\n\n    render () {\n        return (\n            <button color={this.props.color} onClick={this.updateCount} id=\"counter\">\n                Count: {this.state.count}\n            </button>\n        );\n    }\n}\n\nexport default CounterButton;","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n    shouldComponentUpdate () {\n        return false;\n    }\n\n    render () {\n        return (\n            <div>\n                <h1 className='f1'>RoboFriends</h1>\n                <CounterButton color={'red'} />\n            </div>\n        );\n    }\n}\n\nexport default Header;\n\n","import React, {Component, ReactNode} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Header from '../components/Header';\nimport './MainPage.css';\nimport {IStateRobots, IStateSearch} from '../interfaces';\n\nexport interface IMainPageProps extends IMapSateToProps, IMapDispatchToProps {\n    children?: ReactNode;\n}\n\nexport interface IMapSateToProps extends IStateSearch, IStateRobots {\n}\n\nexport interface IMapDispatchToProps {\n    onSearchChange: (event: React.SyntheticEvent<HTMLInputElement>) => void;\n    onRequestRobots: () => void;\n}\n\nclass MainPage extends Component<IMainPageProps> {\n    componentDidMount () {\n        this.props.onRequestRobots();\n    }\n\n    filterRobots = () => {\n        return this.props.robots\n            .filter(robot => robot.name.toLowerCase().includes(this.props.searchField.toLowerCase()));\n    };\n\n    render () {\n        const { onSearchChange, isPending } = this.props;\n        if (isPending) {\n            return <h1 className='tc'>Loading</h1>;\n        }\n        return (\n            <div className='tc'>\n                <Header />\n                <SearchBox searchChange={onSearchChange} />\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots={this.filterRobots()}/>\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n        );\n    }\n}\n\nexport default MainPage;\n","import React, { Component } from 'react';\nimport {connect, MapDispatchToPropsFunction} from 'react-redux';\nimport { requestRobots, setSearchField } from '../actions';\nimport './App.css';\nimport MainPage, {IMainPageProps, IMapDispatchToProps, IMapSateToProps} from '../components/MainPage';\nimport {Dispatch} from 'redux';\nimport {IStore} from '../interfaces';\n\nconst mapStateToProps = (state: IStore): IMapSateToProps => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    };\n};\n\nconst mapDispatchToProps: MapDispatchToPropsFunction<void, void> = (dispatch: Dispatch): IMapDispatchToProps => {\n    return {\n        onSearchChange:\n            (event) => dispatch(setSearchField(event.currentTarget.value)),\n        onRequestRobots: () => dispatch(requestRobots() as any)\n    };\n};\n\nclass App extends Component {\n    render () {\n        return <MainPage {...this.props as IMainPageProps}/>\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\ninterface IConfig {\n  onUpdate(registration: ServiceWorkerRegistration): void;\n  onSuccess(registration: ServiceWorkerRegistration): void;\n}\n\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config?: IConfig) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: IConfig) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: IConfig) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { searchRobots, requestRobots } from './reducers';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {IStore} from './interfaces';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots});\nconst store = createStore<IStore, any, any, any>(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root') as HTMLElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}